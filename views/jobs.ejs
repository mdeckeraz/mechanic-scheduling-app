<%- include('partials/header') %>

<div class="row mb-4">
  <div class="col-md-8">
    <h2>Jobs</h2>
  </div>
  <div class="col-md-4 text-end">
    <a href="/jobs/add" class="btn btn-primary">Schedule New Job</a>
  </div>
</div>

<div class="row mb-4">
  <div class="col-md-12">
    <div class="card">
      <div class="card-body">
        <div class="row">
          <div class="col-md-4">
            <div class="mb-3">
              <label for="statusFilter" class="form-label">Filter by Status</label>
              <select class="form-select" id="statusFilter">
                <option value="all">All Jobs</option>
                <option value="Scheduled">Scheduled</option>
                <option value="In Progress">In Progress</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
              </select>
            </div>
          </div>
          <div class="col-md-4">
            <div class="mb-3">
              <label for="mechanicFilter" class="form-label">Filter by Mechanic</label>
              <select class="form-select" id="mechanicFilter">
                <option value="all">All Mechanics</option>
                <!-- Mechanics will be loaded here dynamically -->
              </select>
            </div>
          </div>
          <div class="col-md-4">
            <div class="mb-3">
              <label for="dateFilter" class="form-label">Filter by Date</label>
              <select class="form-select" id="dateFilter">
                <option value="all">All Dates</option>
                <option value="today">Today</option>
                <option value="tomorrow">Tomorrow</option>
                <option value="thisWeek">This Week</option>
                <option value="nextWeek">Next Week</option>
                <option value="thisMonth">This Month</option>
              </select>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="card">
  <div class="card-body">
    <div id="jobsAlert" class="alert d-none" role="alert"></div>
    
    <div id="jobsLoading" class="text-center">
      <p>Loading jobs...</p>
    </div>
    
    <div id="jobsList" class="d-none">
      <div class="table-responsive">
        <table class="table table-striped table-hover">
          <thead>
            <tr>
              <th>Date & Time</th>
              <th>Customer</th>
              <th>Service</th>
              <th>Vehicle</th>
              <th>Mechanic</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="jobsTableBody">
            <!-- Jobs will be loaded here dynamically -->
          </tbody>
        </table>
      </div>
      <div id="noJobs" class="text-center d-none">
        <p>No jobs found. <a href="/jobs/add">Schedule a job</a> to get started.</p>
      </div>
    </div>
  </div>
</div>

<%- include('partials/footer') %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('token');
    if (!token) {
      window.location.href = '/login';
      return;
    }
    
    // Load mechanics for filter
    loadMechanics();
    
    // Load jobs
    loadJobs();
    
    // Set up filter event listeners
    document.getElementById('statusFilter').addEventListener('change', loadJobs);
    document.getElementById('mechanicFilter').addEventListener('change', loadJobs);
    document.getElementById('dateFilter').addEventListener('change', loadJobs);
    
    async function loadMechanics() {
      try {
        const response = await fetch('/api/mechanics', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        const data = await response.json();
        
        if (data.success && data.data.length > 0) {
          const mechanicFilter = document.getElementById('mechanicFilter');
          
          data.data.forEach(mechanic => {
            const option = document.createElement('option');
            option.value = mechanic._id;
            option.textContent = mechanic.user ? mechanic.user.name : 'Unknown';
            mechanicFilter.appendChild(option);
          });
        }
      } catch (error) {
        console.error('Load mechanics error:', error);
      }
    }
    
    async function loadJobs() {
      try {
        const statusFilter = document.getElementById('statusFilter').value;
        const mechanicFilter = document.getElementById('mechanicFilter').value;
        const dateFilter = document.getElementById('dateFilter').value;
        
        // Build query parameters
        let queryParams = [];
        
        if (statusFilter !== 'all') {
          queryParams.push(`status=${statusFilter}`);
        }
        
        if (mechanicFilter !== 'all') {
          queryParams.push(`mechanicId=${mechanicFilter}`);
        }
        
        // Handle date filter
        let startDate, endDate;
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        switch (dateFilter) {
          case 'today':
            startDate = new Date(today);
            endDate = new Date(today);
            endDate.setHours(23, 59, 59, 999);
            break;
          case 'tomorrow':
            startDate = new Date(today);
            startDate.setDate(startDate.getDate() + 1);
            endDate = new Date(startDate);
            endDate.setHours(23, 59, 59, 999);
            break;
          case 'thisWeek':
            startDate = new Date(today);
            const dayOfWeek = startDate.getDay();
            const diff = startDate.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1); // Adjust for Sunday
            startDate.setDate(diff);
            endDate = new Date(startDate);
            endDate.setDate(endDate.getDate() + 6);
            endDate.setHours(23, 59, 59, 999);
            break;
          case 'nextWeek':
            startDate = new Date(today);
            const dayOfNextWeek = startDate.getDay();
            const diffNext = startDate.getDate() - dayOfNextWeek + (dayOfNextWeek === 0 ? -6 : 1) + 7; // Next week
            startDate.setDate(diffNext);
            endDate = new Date(startDate);
            endDate.setDate(endDate.getDate() + 6);
            endDate.setHours(23, 59, 59, 999);
            break;
          case 'thisMonth':
            startDate = new Date(today.getFullYear(), today.getMonth(), 1);
            endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
            endDate.setHours(23, 59, 59, 999);
            break;
        }
        
        if (startDate && endDate) {
          queryParams.push(`startDate=${startDate.toISOString()}`);
          queryParams.push(`endDate=${endDate.toISOString()}`);
        }
        
        // Build the URL
        const url = `/api/jobs${queryParams.length > 0 ? '?' + queryParams.join('&') : ''}`;
        
        document.getElementById('jobsLoading').classList.remove('d-none');
        document.getElementById('jobsList').classList.add('d-none');
        
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        const data = await response.json();
        
        document.getElementById('jobsLoading').classList.add('d-none');
        document.getElementById('jobsList').classList.remove('d-none');
        
        if (data.success && data.data.length > 0) {
          const tableBody = document.getElementById('jobsTableBody');
          tableBody.innerHTML = '';
          
          data.data.forEach(job => {
            const startTime = new Date(job.startTime);
            const endTime = new Date(job.endTime);
            
            const row = document.createElement('tr');
            
            row.innerHTML = `
              <td>
                ${formatDate(startTime)}<br>
                ${formatTime(startTime)} - ${formatTime(endTime)}
              </td>
              <td>${job.customer.name}<br>${job.customer.phone}</td>
              <td>${job.serviceType}</td>
              <td>${job.vehicle.make} ${job.vehicle.model} (${job.vehicle.year})</td>
              <td>${job.mechanic && job.mechanic.user ? job.mechanic.user.name : 'Unassigned'}</td>
              <td>
                <span class="badge ${getStatusBadgeClass(job.status)}">
                  ${job.status}
                </span>
              </td>
              <td>
                <a href="/jobs/${job._id}" class="btn btn-sm btn-info">View</a>
                <button class="btn btn-sm btn-danger delete-job" data-id="${job._id}">Delete</button>
              </td>
            `;
            
            tableBody.appendChild(row);
          });
          
          document.getElementById('noJobs').classList.add('d-none');
          
          // Add event listeners for delete buttons
          document.querySelectorAll('.delete-job').forEach(button => {
            button.addEventListener('click', async (e) => {
              if (confirm('Are you sure you want to delete this job?')) {
                const jobId = e.target.getAttribute('data-id');
                await deleteJob(jobId);
              }
            });
          });
        } else {
          document.getElementById('noJobs').classList.remove('d-none');
        }
      } catch (error) {
        console.error('Load jobs error:', error);
        showAlert('jobsAlert', 'An error occurred while loading jobs', 'danger');
        document.getElementById('jobsLoading').classList.add('d-none');
      }
    }
    
    async function deleteJob(id) {
      try {
        const response = await fetch(`/api/jobs/${id}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        const data = await response.json();
        
        if (data.success) {
          showAlert('jobsAlert', 'Job deleted successfully', 'success');
          loadJobs();
        } else {
          showAlert('jobsAlert', data.message || 'Failed to delete job', 'danger');
        }
      } catch (error) {
        console.error('Delete job error:', error);
        showAlert('jobsAlert', 'An error occurred while deleting the job', 'danger');
      }
    }
    
    function formatDate(date) {
      return date.toLocaleDateString('en-US', { 
        weekday: 'short', 
        month: 'short', 
        day: 'numeric' 
      });
    }
    
    function formatTime(date) {
      return date.toLocaleTimeString('en-US', { 
        hour: 'numeric', 
        minute: '2-digit', 
        hour12: true 
      });
    }
    
    function getStatusBadgeClass(status) {
      switch (status) {
        case 'Scheduled':
          return 'bg-primary';
        case 'In Progress':
          return 'bg-warning';
        case 'Completed':
          return 'bg-success';
        case 'Cancelled':
          return 'bg-danger';
        default:
          return 'bg-secondary';
      }
    }
    
    function showAlert(elementId, message, type) {
      const alertElement = document.getElementById(elementId);
      if (alertElement) {
        alertElement.textContent = message;
        alertElement.className = `alert alert-${type}`;
        alertElement.classList.remove('d-none');
        
        setTimeout(() => {
          alertElement.classList.add('d-none');
        }, 5000);
      }
    }
  });
</script>
