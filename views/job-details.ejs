<%- include('partials/header') %>

<div class="row mb-4">
  <div class="col-md-12">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/jobs">Jobs</a></li>
        <li class="breadcrumb-item active" aria-current="page">Job Details</li>
      </ol>
    </nav>
  </div>
</div>

<div class="row">
  <div class="col-md-8">
    <div class="card mb-4">
      <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
        <h2 class="mb-0" id="jobTitle">Job Details</h2>
        <div>
          <button class="btn btn-light btn-sm me-2" id="editJobBtn">Edit</button>
          <button class="btn btn-light btn-sm" id="printJobBtn">Print</button>
        </div>
      </div>
      <div class="card-body">
        <div id="jobAlert" class="alert d-none" role="alert"></div>
        
        <div id="jobLoading" class="text-center">
          <p>Loading job details...</p>
        </div>
        
        <div id="jobDetails" class="d-none">
          <h4 class="mb-3">Customer Information</h4>
          <div class="row mb-4">
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label fw-bold">Name</label>
                <p id="customerName"></p>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label fw-bold">Email</label>
                <p id="customerEmail"></p>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label fw-bold">Phone</label>
                <p id="customerPhone"></p>
              </div>
            </div>
          </div>
          
          <h4 class="mb-3">Vehicle Information</h4>
          <div class="row mb-4">
            <div class="col-md-3">
              <div class="mb-3">
                <label class="form-label fw-bold">Make</label>
                <p id="vehicleMake"></p>
              </div>
            </div>
            <div class="col-md-3">
              <div class="mb-3">
                <label class="form-label fw-bold">Model</label>
                <p id="vehicleModel"></p>
              </div>
            </div>
            <div class="col-md-3">
              <div class="mb-3">
                <label class="form-label fw-bold">Year</label>
                <p id="vehicleYear"></p>
              </div>
            </div>
            <div class="col-md-3">
              <div class="mb-3">
                <label class="form-label fw-bold">VIN</label>
                <p id="vehicleVin"></p>
              </div>
            </div>
          </div>
          
          <h4 class="mb-3">Service Information</h4>
          <div class="row mb-4">
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label fw-bold">Service Type</label>
                <p id="serviceType"></p>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label fw-bold">Status</label>
                <p>
                  <span id="jobStatus" class="badge"></span>
                  <button id="updateStatusBtn" class="btn btn-sm btn-outline-primary ms-2">Update Status</button>
                </p>
              </div>
            </div>
          </div>
          
          <h4 class="mb-3">Schedule</h4>
          <div class="row mb-4">
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label fw-bold">Date</label>
                <p id="jobDate"></p>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label fw-bold">Time</label>
                <p id="jobTime"></p>
              </div>
            </div>
            <div class="col-md-4">
              <div class="mb-3">
                <label class="form-label fw-bold">Duration</label>
                <p id="jobDuration"></p>
              </div>
            </div>
          </div>
          
          <h4 class="mb-3">Assigned Mechanic</h4>
          <div class="row mb-4">
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label fw-bold">Mechanic</label>
                <p id="mechanicName"></p>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label fw-bold">Specialties</label>
                <p id="mechanicSpecialties"></p>
              </div>
            </div>
          </div>
          
          <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button id="cancelJobBtn" class="btn btn-danger me-md-2">Cancel Job</button>
            <a href="/jobs" class="btn btn-secondary">Back to Jobs</a>
          </div>
        </div>
        
        <div id="jobEditForm" class="d-none">
          <!-- Edit form will be added here -->
        </div>
        
        <div id="jobNotFound" class="d-none">
          <p class="text-center">Job not found. <a href="/jobs">Return to jobs list</a>.</p>
        </div>
      </div>
    </div>
  </div>
  
  <div class="col-md-4">
    <div class="card">
      <div class="card-header bg-primary text-white">
        <h3 class="mb-0">Job Notes</h3>
      </div>
      <div class="card-body">
        <div id="notesLoading" class="text-center">
          <p>Loading notes...</p>
        </div>
        
        <div id="jobNotes" class="d-none">
          <div class="mb-3">
            <textarea id="newNote" class="form-control mb-2" rows="3" placeholder="Add a note..."></textarea>
            <button id="addNoteBtn" class="btn btn-primary">Add Note</button>
          </div>
          
          <hr>
          
          <div id="notesList">
            <!-- Notes will be loaded here dynamically -->
          </div>
          
          <div id="noNotes" class="text-center mt-3 d-none">
            <p>No notes for this job yet.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Status Update Modal -->
<div class="modal fade" id="statusModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Job Status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label for="statusSelect" class="form-label">Select New Status</label>
          <select class="form-select" id="statusSelect">
            <option value="Scheduled">Scheduled</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
            <option value="Cancelled">Cancelled</option>
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="saveStatusBtn">Save Changes</button>
      </div>
    </div>
  </div>
</div>

<%- include('partials/footer') %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const token = localStorage.getItem('token');
    if (!token) {
      window.location.href = '/login';
      return;
    }
    
    const jobId = '<%= jobId %>';
    let jobData = null;
    
    // Bootstrap modal instance
    const statusModal = new bootstrap.Modal(document.getElementById('statusModal'));
    
    // Load job details
    loadJobDetails();
    
    // Event listeners
    document.getElementById('editJobBtn').addEventListener('click', () => {
      // Redirect to edit page or show edit form
      window.location.href = `/jobs/edit/${jobId}`;
    });
    
    document.getElementById('printJobBtn').addEventListener('click', () => {
      window.print();
    });
    
    document.getElementById('updateStatusBtn').addEventListener('click', () => {
      const statusSelect = document.getElementById('statusSelect');
      statusSelect.value = jobData.status;
      statusModal.show();
    });
    
    document.getElementById('saveStatusBtn').addEventListener('click', async () => {
      const newStatus = document.getElementById('statusSelect').value;
      await updateJobStatus(newStatus);
      statusModal.hide();
    });
    
    document.getElementById('cancelJobBtn').addEventListener('click', async () => {
      if (confirm('Are you sure you want to cancel this job?')) {
        await updateJobStatus('Cancelled');
      }
    });
    
    document.getElementById('addNoteBtn').addEventListener('click', async () => {
      const noteText = document.getElementById('newNote').value.trim();
      if (noteText) {
        await addJobNote(noteText);
      }
    });
    
    async function loadJobDetails() {
      try {
        const response = await fetch(`/api/jobs/${jobId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        
        const data = await response.json();
        
        document.getElementById('jobLoading').classList.add('d-none');
        
        if (data.success) {
          jobData = data.data;
          updateJobDetails(jobData);
          document.getElementById('jobDetails').classList.remove('d-none');
          
          // Load notes if they exist
          loadJobNotes();
        } else {
          document.getElementById('jobNotFound').classList.remove('d-none');
        }
      } catch (error) {
        console.error('Load job error:', error);
        showAlert('jobAlert', 'An error occurred while loading job details', 'danger');
        document.getElementById('jobLoading').classList.add('d-none');
      }
    }
    
    function updateJobDetails(job) {
      // Set job title
      document.getElementById('jobTitle').textContent = `${job.serviceType} - ${formatDate(new Date(job.startTime))}`;
      
      // Customer information
      document.getElementById('customerName').textContent = job.customer.name;
      document.getElementById('customerEmail').textContent = job.customer.email;
      document.getElementById('customerPhone').textContent = job.customer.phone;
      
      // Vehicle information
      document.getElementById('vehicleMake').textContent = job.vehicle.make;
      document.getElementById('vehicleModel').textContent = job.vehicle.model;
      document.getElementById('vehicleYear').textContent = job.vehicle.year;
      document.getElementById('vehicleVin').textContent = job.vehicle.vin;
      
      // Service information
      document.getElementById('serviceType').textContent = job.serviceType;
      
      const statusBadge = document.getElementById('jobStatus');
      statusBadge.textContent = job.status;
      statusBadge.className = `badge ${getStatusBadgeClass(job.status)}`;
      
      // Schedule information
      const startTime = new Date(job.startTime);
      const endTime = new Date(job.endTime);
      
      document.getElementById('jobDate').textContent = formatDate(startTime);
      document.getElementById('jobTime').textContent = `${formatTime(startTime)} - ${formatTime(endTime)}`;
      
      // Calculate duration in hours
      const durationMs = endTime - startTime;
      const durationHours = durationMs / (1000 * 60 * 60);
      document.getElementById('jobDuration').textContent = `${durationHours} hour${durationHours !== 1 ? 's' : ''}`;
      
      // Mechanic information
      if (job.mechanic) {
        document.getElementById('mechanicName').textContent = job.mechanic.user ? job.mechanic.user.name : 'N/A';
        document.getElementById('mechanicSpecialties').textContent = job.mechanic.specialties ? job.mechanic.specialties.join(', ') : 'N/A';
      } else {
        document.getElementById('mechanicName').textContent = 'Unassigned';
        document.getElementById('mechanicSpecialties').textContent = 'N/A';
      }
      
      // Update button visibility based on status
      if (job.status === 'Cancelled' || job.status === 'Completed') {
        document.getElementById('updateStatusBtn').classList.add('d-none');
        document.getElementById('cancelJobBtn').classList.add('d-none');
      }
    }
    
    async function updateJobStatus(newStatus) {
      try {
        const response = await fetch(`/api/jobs/${jobId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            status: newStatus,
            // Include other fields to avoid losing data
            customer: jobData.customer,
            vehicle: jobData.vehicle,
            serviceType: jobData.serviceType,
            startTime: jobData.startTime,
            endTime: jobData.endTime,
            mechanicId: jobData.mechanic ? jobData.mechanic._id : null
          })
        });
        
        const data = await response.json();
        
        if (data.success) {
          showAlert('jobAlert', `Job status updated to ${newStatus}`, 'success');
          jobData = data.data;
          updateJobDetails(jobData);
        } else {
          showAlert('jobAlert', data.message || 'Failed to update job status', 'danger');
        }
      } catch (error) {
        console.error('Update status error:', error);
        showAlert('jobAlert', 'An error occurred while updating the job status', 'danger');
      }
    }
    
    async function loadJobNotes() {
      try {
        // This is a placeholder for the notes API
        // You would need to implement a notes API endpoint
        document.getElementById('notesLoading').classList.add('d-none');
        document.getElementById('jobNotes').classList.remove('d-none');
        document.getElementById('noNotes').classList.remove('d-none');
        document.getElementById('notesList').innerHTML = '';
      } catch (error) {
        console.error('Load notes error:', error);
        document.getElementById('notesLoading').classList.add('d-none');
      }
    }
    
    async function addJobNote(noteText) {
      try {
        // This is a placeholder for the notes API
        // You would need to implement a notes API endpoint
        document.getElementById('newNote').value = '';
        showAlert('jobAlert', 'Note functionality not implemented yet', 'info');
      } catch (error) {
        console.error('Add note error:', error);
        showAlert('jobAlert', 'An error occurred while adding the note', 'danger');
      }
    }
    
    function formatDate(date) {
      return date.toLocaleDateString('en-US', { 
        weekday: 'short', 
        month: 'short', 
        day: 'numeric',
        year: 'numeric'
      });
    }
    
    function formatTime(date) {
      return date.toLocaleTimeString('en-US', { 
        hour: 'numeric', 
        minute: '2-digit', 
        hour12: true 
      });
    }
    
    function getStatusBadgeClass(status) {
      switch (status) {
        case 'Scheduled':
          return 'bg-primary';
        case 'In Progress':
          return 'bg-warning';
        case 'Completed':
          return 'bg-success';
        case 'Cancelled':
          return 'bg-danger';
        default:
          return 'bg-secondary';
      }
    }
    
    function showAlert(elementId, message, type) {
      const alertElement = document.getElementById(elementId);
      if (alertElement) {
        alertElement.textContent = message;
        alertElement.className = `alert alert-${type}`;
        alertElement.classList.remove('d-none');
        
        setTimeout(() => {
          alertElement.classList.add('d-none');
        }, 5000);
      }
    }
  });
</script>
